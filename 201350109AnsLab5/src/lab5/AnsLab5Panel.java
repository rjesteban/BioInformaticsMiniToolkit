package lab5;


import lab5.logic.DNASequenceAlignmentSolver;
import lab5.logic.Result;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import lab5.logic.ProteinSequenceAlignmentSolver;
import lab5.logic.ProteinSequenceLookups;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author rj
 */
public class AnsLab5Panel extends javax.swing.JPanel {

    /**
     * Creates new form AnsLab5Panel
     */
    public AnsLab5Panel() {
        initComponents();
        nucleotidePanel.setVisible(false);
        proteinPanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputSpaceTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        uploadFileButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        nucleotideRadioButton = new javax.swing.JRadioButton();
        proteinRadioButton = new javax.swing.JRadioButton();
        proteinPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        proteinScoringSchemeComboBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        proteinGapScore = new javax.swing.JTextField();
        nucleotidePanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        dnaMatchScore = new javax.swing.JTextField();
        dnaMismatchScore = new javax.swing.JTextField();
        dnaGapScore = new javax.swing.JTextField();
        dnaAlignment = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        quitButton = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Pairwise Sequence Alignment by Arnold Joseph Caesar P. Esteban");

        inputSpaceTextArea.setColumns(20);
        inputSpaceTextArea.setRows(5);
        jScrollPane1.setViewportView(inputSpaceTextArea);

        jLabel2.setText("Input Space:");

        resetButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        uploadFileButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        uploadFileButton.setText("Upload File");
        uploadFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadFileButtonActionPerformed(evt);
            }
        });

        submitButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        nucleotideRadioButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        nucleotideRadioButton.setText("Nucleotide Sequence");
        nucleotideRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nucleotideRadioButtonActionPerformed(evt);
            }
        });

        proteinRadioButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        proteinRadioButton.setText("Protein Sequence");
        proteinRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinRadioButtonActionPerformed(evt);
            }
        });

        proteinPanel.setBackground(new java.awt.Color(204, 204, 204));
        proteinPanel.setPreferredSize(new java.awt.Dimension(160, 160));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Scoring matrix:");

        proteinScoringSchemeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PAM120(Global)", "PAM250(Global)", "Blosum62(Local)", "Blosum45(Local)" }));
        proteinScoringSchemeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinScoringSchemeComboBoxActionPerformed(evt);
            }
        });

        jLabel7.setText("Gap");

        proteinGapScore.setEditable(false);
        proteinGapScore.setText("-8");
        proteinGapScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinGapScoreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout proteinPanelLayout = new javax.swing.GroupLayout(proteinPanel);
        proteinPanel.setLayout(proteinPanelLayout);
        proteinPanelLayout.setHorizontalGroup(
            proteinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proteinPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(proteinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(proteinScoringSchemeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(proteinPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(proteinGapScore, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        proteinPanelLayout.setVerticalGroup(
            proteinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proteinPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(proteinScoringSchemeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(proteinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(proteinGapScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        nucleotidePanel.setBackground(new java.awt.Color(204, 204, 204));
        nucleotidePanel.setPreferredSize(new java.awt.Dimension(160, 160));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Match:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Mismatch:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Gap:");

        dnaMatchScore.setText("1");
        dnaMatchScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dnaMatchScoreActionPerformed(evt);
            }
        });

        dnaMismatchScore.setText("0");

        dnaGapScore.setText("-1");

        dnaAlignment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Global (default)", "Local" }));
        dnaAlignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dnaAlignmentActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Alignment:");

        javax.swing.GroupLayout nucleotidePanelLayout = new javax.swing.GroupLayout(nucleotidePanel);
        nucleotidePanel.setLayout(nucleotidePanelLayout);
        nucleotidePanelLayout.setHorizontalGroup(
            nucleotidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nucleotidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(nucleotidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nucleotidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(dnaAlignment, 0, 108, Short.MAX_VALUE)
                        .addGroup(nucleotidePanelLayout.createSequentialGroup()
                            .addGroup(nucleotidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel3))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(nucleotidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(dnaMatchScore)
                                .addComponent(dnaMismatchScore)
                                .addComponent(dnaGapScore, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))))
                    .addComponent(jLabel8))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        nucleotidePanelLayout.setVerticalGroup(
            nucleotidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nucleotidePanelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(nucleotidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dnaMatchScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(nucleotidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(dnaMismatchScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(nucleotidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(dnaGapScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dnaAlignment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        quitButton.setBackground(new java.awt.Color(255, 51, 51));
        quitButton.setText("QUIT");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(129, 129, 129)
                                .addComponent(resetButton)
                                .addGap(18, 18, 18)
                                .addComponent(uploadFileButton)
                                .addGap(18, 18, 18)
                                .addComponent(submitButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(nucleotideRadioButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(nucleotidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(99, 99, 99)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(proteinPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(proteinRadioButton)
                                        .addGap(115, 115, 115)))))
                        .addGap(0, 10, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(quitButton)
                        .addGap(25, 25, 25))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetButton)
                    .addComponent(uploadFileButton)
                    .addComponent(submitButton))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nucleotideRadioButton)
                    .addComponent(proteinRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(proteinPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(nucleotidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
                .addContainerGap(64, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        this.inputSpaceTextArea.setText("");
    }//GEN-LAST:event_resetButtonActionPerformed

    private void proteinRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinRadioButtonActionPerformed
        if (proteinRadioButton.isSelected()) {
            proteinPanel.setVisible(true);
            nucleotideRadioButton.setSelected(false);
            nucleotidePanel.setVisible(false);
        } else {
            proteinPanel.setVisible(false);
        }
        
    }//GEN-LAST:event_proteinRadioButtonActionPerformed

    private void nucleotideRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nucleotideRadioButtonActionPerformed
        if (nucleotideRadioButton.isSelected()) {
            nucleotidePanel.setVisible(true);
            proteinRadioButton.setSelected(false);
            proteinPanel.setVisible(false);
        } else {
            nucleotidePanel.setVisible(false);
        }
    }//GEN-LAST:event_nucleotideRadioButtonActionPerformed

    private void proteinGapScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinGapScoreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_proteinGapScoreActionPerformed

    private void dnaMatchScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dnaMatchScoreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dnaMatchScoreActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

    private void uploadFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadFileButtonActionPerformed
                JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //This is where a real application would open the file.
            String input = "";
            try {
            Scanner sc = new Scanner(fc.getSelectedFile());
            while(sc.hasNextLine()) {
                String line = sc.nextLine().replaceAll("\r", "");
                input += line + "\n";
            }
            this.inputSpaceTextArea.setText(input);            
            } catch(FileNotFoundException fne){}
        } else {
            System.out.println("operation cancelled");
        }
    }//GEN-LAST:event_uploadFileButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        ArrayList<FastaSequence> l = new ArrayList<FastaSequence>();
        
        if (!nucleotideRadioButton.isSelected() && !proteinRadioButton.isSelected()) {
            JOptionPane.showMessageDialog(inputSpaceTextArea, 
                    "Please select scoring scheme.", "No scoring scheme set.", 
                    JOptionPane.ERROR_MESSAGE);
        } else if (!isFasta(l)) {
            JOptionPane.showMessageDialog(inputSpaceTextArea, 
                    "Input is not fasta. Please fix input.", "Invalid format", 
                    JOptionPane.ERROR_MESSAGE);
        } else if (l.size() != 2) {
            JOptionPane.showMessageDialog(inputSpaceTextArea, 
                    "Please input 2 sequences only.", "Invalid number of sequence input", 
                    JOptionPane.ERROR_MESSAGE);
        } else if (!isProtein(l.get(0).sequence)) {
            JOptionPane.showMessageDialog(inputSpaceTextArea, 
                    "Input is not protein/nucleotide sequence. Please fix input 1.", "Invalid content", 
                    JOptionPane.ERROR_MESSAGE);
        } else if (!isProtein(l.get(1).sequence)) {
            JOptionPane.showMessageDialog(inputSpaceTextArea, 
                    "Input is not protein/nucleotide sequence. Please fix input 2.", "Invalid content", 
                    JOptionPane.ERROR_MESSAGE);
        } else if (!isDNA(l.get(0).sequence) && isDNA(l.get(1).sequence) && nucleotideRadioButton.isSelected()) {
            JOptionPane.showMessageDialog(inputSpaceTextArea, 
                    "Input 1 is not DNA while input 2 is DNA. Please fix inputs.", "Invalid content", 
                    JOptionPane.ERROR_MESSAGE);
        } else if (isDNA(l.get(0).sequence) && !isDNA(l.get(1).sequence) && nucleotideRadioButton.isSelected()) {
            JOptionPane.showMessageDialog(inputSpaceTextArea, 
                    "Input 1 is DNA while input 2 is not DNA. Please fix inputs.", "Invalid content", 
                    JOptionPane.ERROR_MESSAGE);
        } else if (!isDNA(l.get(0).sequence) && !isDNA(l.get(1).sequence) && nucleotideRadioButton.isSelected()) {
            JOptionPane.showMessageDialog(inputSpaceTextArea, 
                    "Input 1 and input 2 is not DNA. Please fix inputs.", "Invalid content", 
                    JOptionPane.ERROR_MESSAGE);
        } else {
            if (nucleotideRadioButton.isSelected()) {
                int match, mismatch, gap;
                try {
                match = Integer.valueOf(dnaMatchScore.getText());
                mismatch = Integer.valueOf(dnaMismatchScore.getText());
                gap = Integer.valueOf(dnaGapScore.getText());
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(inputSpaceTextArea, 
                        "Please select scoring scheme.", "No scoring scheme set.", 
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }

                String message = "match score should always be "
                        + "positive and higher than mismatch,\n" +
                    "which can either have a positive or a negative score,\n" +
                    "as well as that of gap, which is always a negative score\n" +
                    "or lower than that of a mismatch score.";


                if (match <= 0) {
                   JOptionPane.showMessageDialog(inputSpaceTextArea, 
                           "match score is not positive.\n" + message, 
                           "Invalid scoring scheme", JOptionPane.ERROR_MESSAGE);
                   return;
                }
                else if (match < mismatch) {
                    JOptionPane.showMessageDialog(inputSpaceTextArea, 
                           "match score is less than mismatch score.\n" + message, 
                           "Invalid scoring scheme", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                else if (gap >= 0) {
                    JOptionPane.showMessageDialog(inputSpaceTextArea, 
                           "gap score is not negative.\n" + message, 
                           "Invalid scoring scheme", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                else if (gap >= mismatch) {
                    JOptionPane.showMessageDialog(inputSpaceTextArea, 
                           "gap score is greater than mismatch.\n" + message, 
                           "Invalid scoring scheme", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                List<Result> lr;
                if (dnaAlignment.getSelectedIndex() == 0) {
                    lr = DNASequenceAlignmentSolver.solveGlobalAlignment(
                        l.get(0).sequence, l.get(1).sequence, match, mismatch, gap);
                } else {
                    lr = DNASequenceAlignmentSolver.solveLocalAlignment(
                        l.get(0).sequence, l.get(1).sequence, match, mismatch, gap);
                }
                
                JFrame rf = new JFrame("Results");
                ResultPanel rp = new ResultPanel(lr, l);
                rf.setPreferredSize(rp.getPreferredSize());
                rf.getContentPane().add(rp);
                rf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                rf.pack();
                rf.setVisible(true);
            } else { // protein
                int gap;
                try {
                    gap = Integer.valueOf(proteinGapScore.getText());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(inputSpaceTextArea, 
                           "Gap score is not a number.\n", 
                           "Invalid scoring scheme", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                int scheme = proteinScoringSchemeComboBox.getSelectedIndex();
                // local
                List<Result> lr;
                if (scheme == 2 || scheme == 3) {
                    lr = ProteinSequenceAlignmentSolver.solveLocalAlignment(
                            l.get(0).sequence, l.get(1).sequence,
                            ProteinSequenceLookups.getInstance().getLookUp(scheme), 
                            gap);
                } else {
                    lr = ProteinSequenceAlignmentSolver.solveGlobalAlignment(
                            l.get(0).sequence, l.get(1).sequence,
                            ProteinSequenceLookups.getInstance().getLookUp(scheme), 
                            gap);
                }
                JFrame rf = new JFrame("Results");
                ResultPanel rp = new ResultPanel(lr, l);
                rf.setPreferredSize(rp.getPreferredSize());
                rf.getContentPane().add(rp);
                rf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                rf.pack();
                rf.setVisible(true);
            }
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void proteinScoringSchemeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinScoringSchemeComboBoxActionPerformed
        // TODO add your handling code here:
        
        this.proteinGapScore.setText("" +
                ProteinSequenceLookups.getInstance().getLookUp(
                        proteinScoringSchemeComboBox.getSelectedIndex())[0][26]);
    }//GEN-LAST:event_proteinScoringSchemeComboBoxActionPerformed

    private void dnaAlignmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dnaAlignmentActionPerformed
        
    }//GEN-LAST:event_dnaAlignmentActionPerformed

    
    private boolean isFasta(ArrayList<FastaSequence> fastaSequences) {
        String[] text = inputSpaceTextArea.getText().split("\n");
        if (text.length <= 1 || text[0].isEmpty())
            return false;
        for (int i = 0; i < text.length;) {
            if (text[i].startsWith(">")) {
                String comment = text[i];
                String sequence = "";
                for (int j = i + 1; j < text.length; j++, i = j) {
                    if (text[j].isEmpty() || text[j].startsWith(">")) break;
                    sequence += text[j];
                }
                fastaSequences.add(new FastaSequence(comment, sequence.toUpperCase()));
                if (sequence.isEmpty()) i++;
            } else if (!text[i].isEmpty()) {
//                String comment = null;
//                String sequence = "";
//                for (int j = i; j < text.length; j++, i = j) {
//                    if (text[j].isEmpty() || text[j].startsWith(">")) break;
//                    sequence += text[j];
//                }
//                fastaSequences.add(new FastaSequence(comment, sequence));
//                if (sequence.isEmpty()) i++;
                return false;
            }
            else i++;
        }
        return true;
    }
    
    private boolean isDNA(String s) {
        return s.matches("[ACTG]+");
    }
    
    private boolean isProtein(String s) {
        return s.matches("[ARNDCQEGHILKMFPSTWYVBZX]+");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox dnaAlignment;
    private javax.swing.JTextField dnaGapScore;
    private javax.swing.JTextField dnaMatchScore;
    private javax.swing.JTextField dnaMismatchScore;
    private javax.swing.JTextArea inputSpaceTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel nucleotidePanel;
    private javax.swing.JRadioButton nucleotideRadioButton;
    private javax.swing.JTextField proteinGapScore;
    private javax.swing.JPanel proteinPanel;
    private javax.swing.JRadioButton proteinRadioButton;
    private javax.swing.JComboBox proteinScoringSchemeComboBox;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JButton uploadFileButton;
    // End of variables declaration//GEN-END:variables
}
